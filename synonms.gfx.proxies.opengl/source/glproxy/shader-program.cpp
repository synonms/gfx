#include "shader-program.h"

#include <GL\glew.h>

#include <glproxy\error.h>
#include <glproxy\opengl-exception.h>

using namespace synonms::gfx::proxies::opengl;

void ShaderProgram::AttachShader(unsigned int programId, unsigned int shaderId, bool throwOnError)
{
    if (throwOnError) Error::Clear();

    glAttachShader(programId, shaderId);

    if (throwOnError) Error::ThrowIf({
        {GL_INVALID_VALUE, "ProgramId or ShaderId is not a value generated by OpenGL." },
        {GL_INVALID_OPERATION , "ProgramId is not a program object OR ShaderId is not a shader object OR shader is already attached to program." }
        });
}

unsigned int ShaderProgram::Create(bool throwOnError)
{
    if (throwOnError) Error::Clear();

    auto programId = glCreateProgram();

    if (programId == 0) throw new OpenglException({ {0, "Unable to create shader program"} });

    return programId;
}

void ShaderProgram::Delete(unsigned int programId, bool throwOnError)
{
    if (throwOnError) Error::Clear();

    glDeleteProgram(programId);

    if (throwOnError) Error::ThrowIf({
        {GL_INVALID_VALUE, "ProgramId is not a value generated by OpenGL." }
        });
}

int ShaderProgram::GetUniformLocation(unsigned int programId, const std::string& uniformName, bool throwOnError)
{
    if (throwOnError) Error::Clear();

    auto location = glGetUniformLocation(programId, uniformName.c_str());

    if (throwOnError) Error::ThrowIf({
        {GL_INVALID_VALUE, "ProgramId is not a value generated by OpenGL." },
        {GL_INVALID_OPERATION , "ProgramId is not a program object or has not been successfully linked." }
        });

    return location;
}

void ShaderProgram::Link(unsigned int programId, bool throwOnError)
{
    if (throwOnError) Error::Clear();

    glLinkProgram(programId);

    if (throwOnError) Error::ThrowIf({
        {GL_INVALID_VALUE, "ProgramId is not a value generated by OpenGL." },
        {GL_INVALID_OPERATION , "ProgramId is not a program object or is the currently active program object and transform feedback mode is active." }
        });
}

void ShaderProgram::SetUniform(unsigned int location, int value, bool throwOnError)
{
    if (throwOnError) Error::Clear();

    glUniform1i(location, value);

    if (throwOnError) Error::ThrowIf({
        {GL_INVALID_VALUE, "Count is less than 0." },   // Actually only applicable to vectors
        {GL_INVALID_OPERATION , "No current program object OR size of the uniform variable declared in the shader does not match the size indicated by the glUniform command OR invalid data types OR location is an invalid uniform location for the current program object and location is not equal to -1 OR count is greater than 1 and the indicated uniform variable is not an array variable OR a sampler is loaded using a command other than glUniform1i and glUniform1iv." }
        });
}

void ShaderProgram::SetUniform(unsigned int location, float value1, float value2, float value3, float value4, bool throwOnError)
{
    if (throwOnError) Error::Clear();

    glUniform4f(location, value1, value2, value3, value4);

    if (throwOnError) Error::ThrowIf({
        {GL_INVALID_VALUE, "Count is less than 0." },   // Actually only applicable to vectors
        {GL_INVALID_OPERATION , "No current program object OR size of the uniform variable declared in the shader does not match the size indicated by the glUniform command OR invalid data types OR location is an invalid uniform location for the current program object and location is not equal to -1 OR count is greater than 1 and the indicated uniform variable is not an array variable OR a sampler is loaded using a command other than glUniform1i and glUniform1iv." }
        });
}

void ShaderProgram::Use(unsigned int programId, bool throwOnError)
{
    if (throwOnError) Error::Clear();

    glUseProgram(programId);

    if (throwOnError) Error::ThrowIf({
        {GL_INVALID_VALUE, "ProgramId is not a value generated by OpenGL." },
        {GL_INVALID_OPERATION , "ProgramId is not a program object or could not be made part of current state OR transform feedback mode is active." }
        });
}

void ShaderProgram::Validate(unsigned int programId, bool throwOnError)
{
    if (throwOnError) Error::Clear();

    glValidateProgram(programId);

    if (throwOnError) Error::ThrowIf({
        {GL_INVALID_VALUE, "ProgramId is not a value generated by OpenGL." },
        {GL_INVALID_OPERATION , "ProgramId is not a program object." }
        });
}
